---
title: "データフレームを項目ごとに分割"
author: "Y.Hatanaka"
date: "2018/11/9"
output: 
  html_document: 
    fig_height: 10
    fig_width: 10
    keep_md: yes
    self_contained: no
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

今までは，地点ごとに1つのデータフレーム だった。

これを，項目ごとに分けてみる。

とりあえず読み込んで
```{r}
# データ読み込み ファイル名指定
f <-
  read.table(
    'data.csv',
    sep = ",",
    skip = 1,
    header = F,
    fileEncoding = "Shift_JIS",
    stringsAsFactors = F,
# 空白を削除する
    na.strings=c("", "NULL")
)

# # 空行削除
is_blank <- function(x){
  is.na(x) | x == ""
}
# すべてが空欄である行を探す
unnecessary_row <- apply(f, 1, function(x){
  all(is_blank(x))
})
# 「すべてが空欄である行」以外を残す（＝空行の除去）
f <- f[!unnecessary_row,]


# str(f)
#各地点の地名
placeWithNull <- unique(as.vector(as.matrix(f[1,])[1,]))
placeList <- placeWithNull[!is.na(placeWithNull)]
```

```
V1: [NA], ["年月"], [NA], [年月], [年月], [年月]…
V2: [地名], [項目名+], [NA / 品質・均質 etc.], 
```
これを，
```
地点 => {
  項目名 => 
    date: 年月, 年月,…
    data: データ, データ,…
    qlty: データ, データ,…
    unfm: データ, データ,…
    exst: データ, データ,…
  }
  項目名 => 
    date: 年月, 年月,…
    data: データ, データ,…
    qlty: データ, データ,…
    unfm: データ, データ,…
    exst: データ, データ,…
  }
}
```

とまとめたい。

```{r}
dfList <- list()
for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    placeDfList[[j]] <- thisItemDf
  }
  dfList[[i]] <- placeDfList
}
str(dfList)
```

まとめるときに整形する。

まず1~3行目抜く。
```{r}
dfList <- list()
for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- yearMonthDf[c(-1:-3)]
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[j]] <- thisItemDf
  }
  dfList[[i]] <- placeDfList
}
str(dfList)
```

どうせだから年月はDate型にして，各項目につけとく。
```{r}
dfList <- list()
changeToDate <- function(df){
  # 「年/月」を，その月の1日の日付型に。
  df <- as.Date(paste(as.character(df), "/1", sep = ""))
  return(as.data.frame(df))
}
for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- changeToDate(yearMonthDf[c(-1:-3)])
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[j]] <- cbind(yearMonthDf,thisItemDf)
  }
  dfList[[i]] <- placeDfList
}
str(dfList)

```

ちょっと待て。項目名から余計な部分とる。
```{r}
dfList <- list()
changeToDate <- function(df){
  # 「年/月」を，その月の1日の日付型に。
  df <- as.Date(paste(as.character(df), "/1", sep = ""))
  return(as.data.frame(df))
}
# 1行目_2行目
removeCharFromTitle1 <- function(string) {
  return(gsub("(\\(.+\\))|(の.+)", "", string))
}
removeCharFromTitle2 <- function(string) {
  return(gsub("(情報)|(番号)", "", string))
}
makeColumnName <- function(dfCol) {
  if (is.na(dfCol[3])) {
    retCol = data
  } else {
    retCol = removeCharFromTitle2(dfCol[2])
  }
  return(retCol)
}
# タイトルに設定
setCombinedColumn <- function(df){
  colnames(df) <- apply(df, 2, makeColumnName)
  return(df)
}

for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- changeToDate(yearMonthDf[c(-1:-3)])
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[removeCharFromTitle1(j)]] <- cbind(yearMonthDf,thisItemDf)
  }
  dfList[[i]] <- placeDfList
}
str(dfList)
```

3行目削除する前に，各項目の列名も設定。
```{r}
removeCharFromTitle1 <- function(string) {
  return(gsub("(\\(.+\\))|(の.+)", "", string))
}
attachTitle <- function(string) {
  replacedTitleVec <- c("qlty", "unfm", "exst")
  names(replacedTitleVec) <- c("品質情報", "均質番号", "現象なし情報")
  return(replacedTitleVec[string])
}
makeColumnName <- function(dfCol) {
  if (is.na(dfCol[3])) {
    retCol = "data"
  } else {
    retCol = attachTitle(dfCol[3])
  }
  return(retCol)
}
# タイトルに設定
setCombinedColumn <- function(df){
  colnames(df) <- apply(df, 2, makeColumnName)
  return(df)
}

for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- changeToDate(yearMonthDf[c(-1:-3)])
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    colnames(thisItemDf) <- apply(thisItemDf, 2, makeColumnName)
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[removeCharFromTitle1(j)]] <- cbind(yearMonthDf,thisItemDf)
  }
  dfList[[i]] <- placeDfList
}
str(dfList)
```

日付のとこも列名 "date" にしよう。
```{r}
for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- changeToDate(yearMonthDf[c(-1:-3)])
  colnames(yearMonthDf) <- "date"
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    colnames(thisItemDf) <- apply(thisItemDf, 2, makeColumnName)
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[removeCharFromTitle1(j)]] <- cbind(yearMonthDf,thisItemDf)
  }
  dfList[[i]] <- placeDfList
}
str(dfList)

```

「月」と，ついでだから「年」もつける。
```{r}
ymLabel <- function(x, formatString) {
  return(format(x, formatString))
}

for(i in placeList){
  # 先頭列は日付
  yearMonthDf <- f[,1]
  yearMonthDf <- changeToDate(yearMonthDf[c(-1:-3)])
  colnames(yearMonthDf) <- "date"
  yearMonthDf$year <- as.factor(ymLabel(yearMonthDf$date, "%Y"))
  yearMonthDf$month <- as.factor(ymLabel(yearMonthDf$date, "%m"))
  placeDf <- f[,which(f[1,] == i)]
  itemWithNull <- unique(as.vector(as.matrix(f[2,])[1,]))
  placeDfList <- list()
  for(j in itemWithNull){
    thisItemDf <- placeDf[,which(placeDf[2,] == j)]
    colnames(thisItemDf) <- apply(thisItemDf, 2, makeColumnName)
    thisItemDf <- thisItemDf[c(-1:-3),]
    placeDfList[[removeCharFromTitle1(j)]] <- cbind(yearMonthDf,thisItemDf)
  }
  dfList[[i]] <- placeDfList
}
str(dfList)

```

"data"はnumeric，"qlty","unfm","exst"はfactor。
```{r}

typeChange <- function(x){
# data はnumeric
  replaceColumnToNumeric <- c("data")
# 以下は factor
  replaceColumnToFactor <- c("qlty", "unfm", "exst")
  columnNames <- names(x)
# 列名の中で，これに含まれる列はこれこれにする
  for (i in replaceColumnToNumeric) {
    if (any(columnNames == i)) {
      x[,i] <- as.numeric(x[,i])
    }
  }
  for (i in replaceColumnToFactor) {
    if (any(columnNames == i)) {
      x[,i] <- as.factor(x[,i])
    }
  }
  return(x)
}
hierarchyFunc <- function(x){
  y <- lapply(x,typeChange)
  return(y)
}

dfList <- lapply(dfList, hierarchyFunc)
str(dfList)

```

んじゃデータ集計。今年のデータでグラフ。酒田の平均気温。
```{r}
dfPlot1 <- dfList[["酒田"]][["平均気温"]]
dfPlot2 <- dfPlot1[dfPlot1$year == 2017,]
str(dfPlot1)
str(dfPlot2)
```
列 data がnumだと箱ひげ
```{r}
plot(dfPlot1$month, dfPlot1$data)
```

列 data がcharacterだと散布図
```{r}
plot(dfPlot1$month, as.character(dfPlot1$data), pch=15, col="#00ff0020")
plot(dfPlot2$month, as.character(dfPlot2$data), type="o", pch=1, col="red")
```

散布図は plot.defaultでも。
```{r}
plot.default(dfPlot1$month, as.character(dfPlot1$data), pch=15, col="#00ff0020")
plot.default(dfPlot2$month, as.character(dfPlot2$data), type="o", pch=1, col="red")

```


今年のデータ。
```{r}
dfPlot3 <- dfPlot1[dfPlot1$year == 2018,]
dfPlot3
plot(dfPlot3$month, as.character(dfPlot3$data), type="o", pch=1, col="red")
plot(dfPlot3$month, as.character(dfPlot3$data), type="o", pch=1, col="red", xlim=c(1,12))

```

重ねてみる。
```{r}
par(family = "HiraKakuPro-W3", bty = "l")
plot(dfPlot1$month, dfPlot1$data)
par(new=T)
plot.default(dfPlot1$month, as.character(dfPlot1$data), pch=15, col="#00ff0020")
par(new=T)
plot.default(dfPlot2$month, as.character(dfPlot2$data), type="o", pch=1, col="red")

```

xlim，ylim 設定して，x,y軸合わせる。
```{r}
xlimVec <- c(1,12)
yMax <- max(max(dfPlot1$data),max(dfPlot2$data))
yMin <- min(min(dfPlot1$data),min(dfPlot2$data),0)

par(family = "HiraKakuPro-W3", bty = "l")
plot(dfPlot1$month, dfPlot1$data, xlim=xlimVec, ylim=c(yMin,yMax))
par(new=T)
plot.default(dfPlot1$month, as.character(dfPlot1$data), xlim=xlimVec, ylim=c(yMin,yMax), pch=15, col="#00ff0030")
par(new=T)
plot.default(dfPlot2$month, as.character(dfPlot2$data), xlim=xlimVec, ylim=c(yMin,yMax), type="o", pch=1, col="red")

```

重なった座標軸とラベル表示しない，点の記号変える，軸のラベルつける，凡例つける。
```{r}
xlimVec <- c(1,12)
yMax <- max(max(dfPlot1$data),max(dfPlot2$data))
yMin <- min(min(dfPlot1$data),min(dfPlot2$data),0)

# ラベルはヒラギノ角ゴシW3，枠はL字形
par(family = "HiraKakuPro-W3", bty = "l")
plot(dfPlot1$month, dfPlot1$data, xlim=xlimVec, ylim=c(yMin,yMax), xlab="月", ylab="平均気温")
par(new=T)
#  axes=F, ann=F で軸とラベル消す
# 色は
# colors()
# で表示できる
plot.default(dfPlot1$month, as.character(dfPlot1$data), xlim=xlimVec, ylim=c(yMin,yMax), axes=F, ann=F, pch=15, col="#00ff0020")
par(new=T)
plot.default(dfPlot2$month, as.character(dfPlot2$data), xlim=xlimVec, ylim=c(yMin,yMax), axes=F, ann=F, type="b", pch="+", col="red", lty=3)

```

散布図はpointsでも。
```{r}
pchTypes <- c(3,1)
lineCols <- c("red", "blue")
lineTypes <- 3

# ラベルはヒラギノ角ゴシW3，枠はL字形
par(family = "HiraKakuPro-W3", bty = "l")
plot(dfPlot1$month, dfPlot1$data, xlim=xlimVec, ylim=c(yMin,yMax), xlab="月", ylab="平均気温", main="酒田 平均気温")
points(dfPlot1$month, as.character(dfPlot1$data), pch=15, col="#00ff0060")
points(dfPlot2$month, as.character(dfPlot2$data), type="b", pch=pchTypes[1], col=lineCols[1], lty=lineTypes)
points(dfPlot3$month, as.character(dfPlot3$data), type="b", pch=pchTypes[2], col=lineCols[2], lty=lineTypes)

par(xpd=T)
legend("topleft",c("2017","2018"), pch=pchTypes, col=lineCols, lty=lineTypes, bty="n")
# legend(par()$usr[2], par()$usr[4], c("テスト1"))
```

boxplotのテスト
```{r}
par(family = "HiraKakuPro-W3", bty = "l")
boxplot(dfPlot1$data ~ dfPlot1$month, xlim=xlimVec, ylim=c(yMin,yMax), notch=T, width=rep(0.005, 12), at=(1:12)+0.2, border="#0000ff66", col="#0000ff20", xlab="月", ylab="平均気温", main="酒田 平均気温")

```


さて，データ集計からグラフ描画までまとめてみる。
```{r}
# データ取得
dfPlot1 <- dfList[["酒田"]][["最深積雪"]]
# dfPlot1_1 <- dfPlot1[dfPlot1$year == 2018,]
# dfPlot1_2 <- dfPlot1[dfPlot1$year == 2018,]

dfPlot2 <- dfList[["飛島"]][["最深積雪"]]
# dfPlot2_2 <- dfPlot1[dfPlot1$year == 2018,]

# dfPlot3 <- dfList[["飛島"]][["日最低気温"]]
# dfPlot3_2 <- dfPlot1[dfPlot1$year == 2018,]

pchTypes <- c(3,1)
lineCols <- c("red", "blue")
lineTypes <- 3
xlimVec <- c(1,12)
yMax <- max(max(dfPlot2$data, na.rm = T),max(dfPlot3$data, na.rm = T))
yMin <- min(min(dfPlot2$data, na.rm = T),min(dfPlot3$data, na.rm = T),0)

# ラベルはヒラギノ角ゴシW3，枠はL字形
quartz("test %d",10,10)
par(family = "HiraKakuPro-W3", bty = "l")
# 箱ひげ
# plot(dfPlot1$month, dfPlot1$data, at=1:12+0.2, xlim=xlimVec, ylim=c(yMin,yMax), xlab="月", ylab="平均気温", main="酒田 平均気温")
# plot(dfPlot1$month, dfPlot1$data, xlim=xlimVec, ylim=c(yMin,yMax), xlab="月", ylab="平均気温", main="酒田 平均気温")
boxplot(dfPlot1$data ~ dfPlot1$month, xlim=xlimVec, ylim=c(yMin,yMax), notch=T, boxwex=0.4, at=(1:12)-0.2, border="#0000ff66", col="#0000ff20", xlab="月", ylab="最低気温", main="最低気温")
# points(dfPlot1$month, as.character(dfPlot1$data), pch=15, col="#00ff0060")
# points(dfPlot1_1$month, as.character(dfPlot1_1$data), type="b", pch=pchTypes[1], col=lineCols[1], lty=lineTypes)
# points(dfPlot1_2$month, as.character(dfPlot1_2$data), type="b", pch=pchTypes[2], col=lineCols[2], lty=lineTypes)

par(xpd=T)
# legend("topleft",c("酒田","飛島"), pch=pchTypes, col=lineCols, lty=lineTypes, bty="n")
par(new=T)
# plot(dfPlot3$month, dfPlot3$data, at=1:12-0.2, xlim=xlimVec, ylim=c(yMin,yMax), border="#0000ff66", col="#0000ff30", xlab="月", ylab="平均気温", main="酒田 平均気温", axes=F, ann=F)
plot(dfPlot2$month, dfPlot2$data, xlim=xlimVec, ylim=c(yMin,yMax), notch=T, boxwex=0.4, at=(1:12)+0.2, border="#ff000066", col="#ff000020", xlab="月", ylab="平均気温", main="酒田 平均気温", axes=F, ann=F)

```

ところで，地名と項目名の一覧。
```{r}
placeList <- names(dfList)
placeList
names(dfList[1])
names(dfList[[1]])

nameList <- list()
getItemList <- function(lst){
  return(lapply(lst,function(x){return(names(x))}))
}
# itemList <- lapply(dfList, getItemList)
getItemList(dfList)
```

さて，地名と項目名から箱ひげ図や散布図。
```{r}
dataByPlaceItem <- function(df,place,item){
  return(df[[place]][[item]])
}

getCombinedData <- function(df, place, item) {
  if (length(place) == 2 && length(item) == 1) {
    resultDf1 <- as.data.frame(dfList[[place[1]]][[item]])
    resultDf2 <- as.data.frame(dfList[[place[2]]][[item]])
    resultDf <- list(resultDf1,resultDf2)
    titleCommon <- item
    names(resultDf) <- place
  } else if (length(place) == 1 && length(item) == 2) {
    resultDf1 <- as.data.frame(dfList[[place]][[item[1]]])
    resultDf2 <- as.data.frame(dfList[[place]][[item[2]]])
    resultDf <- list(resultDf1,resultDf2)
    titleCommon <- place
    names(resultDf) <- item
  } else {
    return("place and item are both vector or both not")
    break
  }
  return(list("result"=resultDf, "commonCond"=titleCommon))
}
# str(getCombinedData(dfList, "酒田", c("日最低気温","日最高気温")))
# dfPlot1_1 <- dfPlot1[dfPlot1$year == 2018,]
plotResult <- getCombinedData(dfList, c("酒田","飛島"), "日最低気温")
# plotResult
place1 <- plotResult$result
names(place1[1])
plotResult$commonCond

# place1_name <- names(plotResult[[result]][1])
# place1_name


pchTypes <- c(3,1)
lineCols <- c("red", "blue")
lineTypes <- 3

# ラベルはヒラギノ角ゴシW3，枠はL字形
par(family = "HiraKakuPro-W3", bty = "l")

```

- 地名・項目名の箱ひげ・散布図
- 地名・項目名・年の（折れ線）グラフ
